---
description: 
globs: 
alwaysApply: true
---
Im making fork of Yoradio project - WiFi internet radio on




# Правила проекта JC3248W535C - Интернет-радио на ESP32-S3 с дисплеем AXS15231B

## Общая информация о проекте

**Проект:** Fork проекта YoRadio - WiFi интернет-радио  
**Платформа:** ESP32-S3-WROOM-1-N16R8 dual-core 240MHz  
**Дисплей:** AXS15231B (3.5" LCD-TFT, QSPI, 320x480, портретный режим)  
**Память:** 520K Byte RAM, 16 MB PSRAM, 8 MB Flash  
**Библиотека графики:** Arduino_GFX (Canvas-режим)  
**Язык:** Русский (UTF-8 → CP1251 перекодировка)

## Архитектура системы отображения

### 1. Основные компоненты

**Библиотека графики:**
- **Arduino_GFX** - основная библиотека (заменяет Adafruit GFX)
- **Canvas-режим** - обязателен для AXS15231B (прямой вывод не работает)
- **Универсальные функции** - `tools/GFX_Canvas_screen.h/cpp`

**Структура дисплеев:**
- `src/src/core/display.h/cpp` - основной класс управления дисплеем
- `src/src/displays/displayAXS15231B.cpp/h` - драйвер для AXS15231B
- `src/src/displays/conf/displayAXS15231Bconf.h` - конфигурация дисплея
- `src/src/displays/widgets/` - виджеты (ScrollWidget, FillWidget, SliderWidget, VuWidget, ClockWidget, TextWidget, NumWidget, ProgressWidget, BitrateWidget)

### 2. Универсальные функции вывода (GFX_Canvas_screen.h)

```cpp
// Текст
void gfxDrawText(Arduino_Canvas* gfx, int x, int y, const char* text, uint16_t color, uint16_t bgcolor, uint8_t size, const GFXfont* font = nullptr);
void gfxDrawNumber(Arduino_Canvas* gfx, int x, int y, int num, uint16_t color, uint16_t bgcolor, uint8_t size, const GFXfont* font = nullptr);
void gfxDrawFormatted(Arduino_Canvas* gfx, int x, int y, const char* fmt, uint16_t color, uint16_t bgcolor, uint8_t size, const GFXfont* font, ...);

// Графика
void gfxDrawPixel(Arduino_Canvas* gfx, int x, int y, uint16_t color);
void gfxDrawLine(Arduino_Canvas* gfx, int x0, int y0, int x1, int y1, uint16_t color);
void gfxDrawRect(Arduino_Canvas* gfx, int x, int y, int w, int h, uint16_t color);
void gfxFillRect(Arduino_Canvas* gfx, int x, int y, int w, int h, uint16_t color);
void gfxDrawBitmap(Arduino_Canvas* gfx, int x, int y, const uint16_t* bitmap, int w, int h);

// Очистка
void gfxClearArea(Arduino_Canvas* gfx, int x, int y, int w, int h, uint16_t bgcolor);
void gfxClearScreen(Arduino_Canvas* gfx, uint16_t bgcolor);
void gfxFlushScreen(Arduino_Canvas* gfx);
```

## Критические правила разработки

### 1. Canvas-режим (ОБЯЗАТЕЛЬНО)

**Для дисплея AXS15231B:**
- ✅ **Использовать только Canvas-режим** (`Arduino_Canvas* gfx`)
- ✅ **После каждого изменения вызывать `gfx->flush()`**
- ❌ **НЕ использовать прямой вывод** (`this->fillRect`, `output_display->print` и т.д.)
- ❌ **НЕ смешивать Canvas и прямой вывод**

**Пример правильного кода:**
```cpp
gfx->fillScreen(BLACK);
gfx->setTextColor(RED);
gfx->setTextSize(2);
gfx->setCursor(10, 10);
gfx->println("Hello, world!");
gfx->flush(); // ОБЯЗАТЕЛЬНО!
```

### 2. Поддержка русского языка

**Все текстовые выводы:**
- ✅ **Использовать `utf8Rus(text, true/false)`** для перекодировки UTF-8 → CP1251
- ✅ **Файл:** `src/src/displays/tools/utf8RusGFX.h/cpp`

**Пример:**
```cpp
gfx->print(utf8Rus("Привет, мир!", false));
gfx->print(utf8Rus("ИЮНЯ", true)); // верхний регистр
```

### 3. Инициализация дисплея

**В displayAXS15231B.cpp:**
```cpp
static Arduino_DataBus *bus = nullptr;
static Arduino_GFX *output_display = nullptr;
static Arduino_Canvas *gfx = nullptr;

void DspCore::initDisplay() {
    if (!bus) {
        bus = new Arduino_ESP32QSPI(TFT_CS, TFT_SCK, TFT_D0, TFT_D1, TFT_D2, TFT_D3);
    }
    if (!output_display) {
        output_display = new Arduino_AXS15231B(bus, TFT_RST, 0, false, 320, 480, 0, 0, 0, 0);
    }
    if (!gfx) {
        gfx = new Arduino_Canvas(320, 480, output_display);
        gfx->begin();
    }
}
```

### 4. Аппаратные настройки (myoptions.h)

**Пины дисплея:**
```cpp
#define TFT_CS   45
#define TFT_RST  -1
#define TFT_SCK  47
#define TFT_D0   21
#define TFT_D1   48
#define TFT_D2   40
#define TFT_D3   39
#define GFX_BL   1
```

**Дисплей:**
```cpp
#define DSP_MODEL DSP_AXS15231B
```

**Тачскрин:**
```cpp
#define TS_MODEL TS_MODEL_AXS15231B
#define TS_SDA 4
#define TS_SCL 8
#define TS_INT 3
#define TS_RST -1
```

## Виджеты и компоненты

### 1. Основные виджеты

**Все виджеты работают через Canvas:**
- `ScrollWidget` - прокрутка текста
- `FillWidget` - заливка областей
- `SliderWidget` - слайдеры (громкость, прогресс)
- `VuWidget` - VU-метр
- `ClockWidget` - часы
- `TextWidget` - текст
- `NumWidget` - числа
- `ProgressWidget` - прогресс
- `BitrateWidget` - битрейт

### 2. CPU виджет (опционально)

**Включение:** `#define CPU_LOAD` в myoptions.h

**Файлы:**
- `src/src/Perfmon/esp32_perfmon.h`
- `src/src/Perfmon/perfmon.c`

**Функции:**
- Мониторинг загрузки обоих ядер ESP32-S3
- Сглаживание значений (5 измерений)
- Обновление каждую секунду
- Отображение только на странице плеера

### 3. Автояркость

**Включение:**
```cpp
#define ENABLE_BRIGHTNESS_CONTROL
#define AUTOBACKLIGHT_MAX     2500
#define AUTOBACKLIGHT_MIN     12
#define DOWN_LEVEL           50
#define DOWN_INTERVAL        60
```

## Режимы отображения

### 1. Основные режимы
- `PLAYER` - режим плеера
- `VOL` - режим громкости
- `STATIONS` - режим станций
- `NUMBERS` - режим чисел
- `LOST` - режим ошибки
- `UPDATING` - режим обновления
- `INFO` - режим информации
- `SETTINGS` - режим настроек
- `TIMEZONE` - режим часового пояса
- `WIFI` - режим WiFi
- `CLEAR` - режим очистки
- `SLEEPING` - режим сна
- `SDCHANGE` - режим смены SD

### 2. Страницы
- `PG_PLAYER` - страница плеера
- `PG_DIALOG` - диалоговая страница
- `PG_PLAYLIST` - страница плейлиста
- `PG_SCREENSAVER` - страница заставки

## Зависимости (platformio.ini)

### 1. Основные библиотеки
```ini
lib_deps =
    https://github.com/moononournation/Arduino_GFX.git
    ;adafruit/Adafruit GFX Library  # УДАЛЕНО
```

### 2. Build flags
```ini
build_flags =
    -DBOARD_HAS_PSRAM
    -DARDUINO_RUNNING_CORE=1
    -DARDUINO_EVENT_RUNNING_CORE=1
    -DAUDIOTASK_CORE=0
    -DCONFIG_SPIRAM_SUPPORT=1
    -DCONFIG_FREERTOS_USE_TRACE_FACILITY=1
    -DCONFIG_ESP32S3_DEFAULT_CPU_FREQ_240=1
    -I src/src/GFX_Library_for_Arduino/src
    -I src/src/GFX_Library_for_Arduino/src/canvas
    -I src/src/Perfmon
```

## Правила разработки

### 1. Совместимость
- ✅ **Сохранять совместимость с другими дисплеями** (не трогать их код)
- ✅ **Все изменения только для AXS15231B**
- ✅ **Тестировать на реальном железе**

### 2. Производительность
- ✅ **Использовать PSRAM** (обязательно для Canvas)
- ✅ **Оптимизировать частоту обновления**
- ✅ **Избегать частых `gfx->flush()`**

### 3. Отладка
- ✅ **Проверять координаты виджетов**
- ✅ **Тестировать русский текст**
- ✅ **Проверять все режимы отображения**

### 4. Безопасность
- ✅ **Проверки `if (!gfx) return;`** в виджетах
- ✅ **Обработка ошибок инициализации**
- ✅ **Защита от переполнения буферов**

## Запрещенные действия

### 1. Графика
- ❌ **Прямой вывод на дисплей** (без Canvas)
- ❌ **Смешивание Canvas и прямого вывода**
- ❌ **Использование Adafruit GFX функций**
- ❌ **Забывать `gfx->flush()`**

### 2. Текст
- ❌ **Вывод русского текста без `utf8Rus()`**
- ❌ **Использование неподдерживаемых шрифтов**
- ❌ **Прямое обращение к `output_display`**

### 3. Конфигурация
- ❌ **Изменение пинов без тестирования**
- ❌ **Отключение PSRAM**
- ❌ **Использование неподдерживаемых функций**

## Дальнейшее развитие

### 1. Планируемые улучшения
- Оптимизация производительности Canvas
- Добавление новых виджетов
- Улучшение поддержки тачскрина
- Расширение функций автояркости

### 2. Совместимость
- Поддержка новых версий Arduino_GFX
- Адаптация под новые дисплеи
- Сохранение совместимости с YoRadio

### 3. Документация
- Обновление инструкций при изменениях
- Добавление примеров кода
- Описание новых функций

---

**Важно:** Все изменения должны быть протестированы на реальном железе JC3248W535C с дисплеем AXS15231B. Canvas-режим является обязательным для стабильной работы.

4. **Основные классы и компоненты:**
   - `Display` - основной класс управления дисплеем
   - `DspCore` - базовый класс для работы с конкретным дисплеем
   - `ScrollWidget` - виджет для прокрутки текста
   - `FillWidget` - виджет для заливки областей
   - `SliderWidget` - виджет для отображения слайдеров
   - `VuWidget` - виджет для отображения VU-метра
   - `ClockWidget` - виджет для отображения времени
   - `TextWidget` - виджет для отображения текста

5. **Основные процедуры вывода:**
   - `initDisplay()` - инициализация дисплея
   - `drawLogo()` - отрисовка логотипа
   - `printPLitem()` - вывод элемента плейлиста
   - `drawPlaylist()` - отрисовка плейлиста
   - `_clockSeconds()` - вывод секунд
   - `_clockDate()` - вывод даты
   - `_clockTime()` - вывод времени
   - `printClock()` - общая процедура вывода часов
   - `writePixel()` - запись пикселя
   - `writeFillRect()` - заливка прямоугольника
   - `setClipping()` - установка области отсечения
   - `clearClipping()` - очистка области отсечения

6. **Дополнительные компоненты:**
   - `Page` - класс для управления страницами
   - `Pager` - класс для управления переключением страниц
   - `BitrateWidget` - виджет для отображения битрейта
   - `ProgressWidget` - виджет для отображения прогресса
   - `NumWidget` - виджет для отображения чисел

7. **Системные компоненты:**
   - `displayQueue` - очередь запросов на обновление дисплея
   - `DspTask` - задача для обработки обновлений дисплея
   - `loopDspTask()` - функция обработки очереди обновлений

8. **Режимы отображения:**
   - `PLAYER` - режим плеера
   - `VOL` - режим управления громкостью
   - `STATIONS` - режим выбора станций
   - `NUMBERS` - режим отображения чисел
   - `LOST` - режим отображения ошибки
   - `UPDATING` - режим обновления
   - `INFO` - режим отображения информации
   - `SETTINGS` - режим настроек
   - `TIMEZONE` - режим настройки часового пояса
   - `WIFI` - режим настройки WiFi
   - `CLEAR` - режим очистки экрана
   - `SLEEPING` - режим сна
   - `SDCHANGE` - режим смены SD-карты



1. **display.h - Основные определения:**

```cpp
class Display {
  public:
    uint16_t currentPlItem;      // Текущий элемент плейлиста
    uint16_t numOfNextStation;   // Номер следующей станции
    displayMode_e _mode;         // Текущий режим отображения

  public:
    // Основные методы
    void init();                 // Инициализация дисплея
    void loop();                 // Основной цикл обновления
    void _start();               // Запуск дисплея
    bool ready();                // Проверка готовности
    void resetQueue();           // Сброс очереди запросов
    void putRequest(displayRequestType_e type, int payload=0); // Добавление запроса
    void flip();                 // Переворот экрана
    void invert();               // Инверсия цветов
    bool deepsleep();            // Режим глубокого сна
    void wakeup();               // Пробуждение
    void setContrast();          // Установка контраста
    void printPLitem(uint8_t pos, const char* item); // Печать элемента плейлиста

  private:
    // Виджеты
    ScrollWidget _meta, _title1, _plcurrent;  // Виджеты прокрутки
    ScrollWidget *_weather;                    // Виджет погоды
    ScrollWidget *_title2;                     // Второй заголовок
    BitrateWidget *_fullbitrate;              // Виджет битрейта
    FillWidget *_metabackground, *_plbackground; // Фоновые виджеты
    SliderWidget *_volbar, *_heapbar;         // Слайдеры
    Pager _pager;                             // Менеджер страниц
    Page _footer;                             // Нижняя панель
    VuWidget *_vuwidget;                      // VU-метр
    NumWidget _nums;                          // Числовой виджет
    ProgressWidget _testprogress;             // Прогресс
    ClockWidget _clock;                       // Часы
    Page *_boot;                              // Загрузочный экран
    TextWidget *_bootstring, *_volip, *_voltxt, *_rssi, *_bitrate; // Текстовые виджеты
```

2. **display.cpp - Основные функции:**

```cpp
// Инициализация
void Display::init() {
    dsp.initDisplay();           // Инициализация дисплея
    displayQueue = xQueueCreate(5, sizeof(requestParams_t)); // Создание очереди
    _createDspTask();            // Создание задачи обновления
}

// Загрузочный экран
void Display::_bootScreen() {
    _boot = new Page();
    ProgressWidget* _bootprogress = new ProgressWidget(...);
    _bootstring = new TextWidget(...);
    dsp.drawLogo(bootLogoTop);
}

// Построение страниц
void Display::_buildPager() {
    // Инициализация виджетов
    _meta.init("*", metaConf, config.theme.meta, config.theme.metabg);
    _title1.init("*", title1Conf, config.theme.title1, config.theme.background);
    _clock.init(clockConf, 0, 0);
    
    // Добавление виджетов на страницы
    pages[PG_PLAYER]->addWidget(&_meta);
    pages[PG_PLAYER]->addWidget(&_title1);
    pages[PG_PLAYER]->addWidget(&_clock);
}

// Обработка времени
void Display::_time(bool redraw) {
    // Обновление времени
    _clock.printClock(clockConf.left, clockConf.top, clockConf.fontsize, redraw);
}

// Обработка запросов
void Display::putRequest(displayRequestType_e type, int payload) {
    requestParams_t params = {type, payload};
    xQueueSend(displayQueue, &params, DSQ_SEND_DELAY);
}
```

3. **Основные режимы отображения:**
```cpp
enum displayMode_e { 
    PLAYER,     // Режим плеера
    VOL,        // Режим громкости
    STATIONS,   // Режим станций
    NUMBERS,    // Режим чисел
    LOST,       // Режим ошибки
    UPDATING,   // Режим обновления
    INFO,       // Режим информации
    SETTINGS,   // Режим настроек
    TIMEZONE,   // Режим часового пояса
    WIFI,       // Режим WiFi
    CLEAR,      // Режим очистки
    SLEEPING,   // Режим сна
    SDCHANGE    // Режим смены SD
};
```

4. **Типы запросов на обновление:**
```cpp
enum displayRequestType_e { 
    BOOTSTRING,     // Строка загрузки
    NEWMODE,        // Новый режим
    CLOCK,          // Часы
    NEWTITLE,       // Новый заголовок
    NEWSTATION,     // Новая станция
    NEXTSTATION,    // Следующая станция
    DRAWPLAYLIST,   // Отрисовка плейлиста
    DRAWVOL,        // Отрисовка громкости
    DBITRATE,       // Битрейт
    AUDIOINFO,      // Информация об аудио
    SHOWVUMETER,    // Показать VU-метр
    DSPRSSI,        // RSSI
    SHOWWEATHER,    // Показать погоду
    NEWWEATHER,     // Новая погода
    PSTOP,          // Остановка воспроизведения
    PSTART,         // Начало воспроизведения
    DSP_START,      // Запуск дисплея
    WAITFORSD,      // Ожидание SD
    SDFILEINDEX,    // Индекс файла SD
    NEWIP           // Новый IP
};
```

5. **Основные компоненты системы:**

- **Очередь запросов:**
  - Использует FreeRTOS очередь
  - Обрабатывается в отдельной задаче
  - Поддерживает 5 одновременных запросов

- **Виджеты:**
  - ScrollWidget - для прокрутки текста
  - FillWidget - для заливки областей
  - SliderWidget - для слайдеров
  - VuWidget - для VU-метра
  - ClockWidget - для часов
  - TextWidget - для текста

- **Страницы:**
  - PG_PLAYER - страница плеера
  - PG_DIALOG - диалоговая страница
  - PG_PLAYLIST - страница плейлиста
  - PG_SCREENSAVER - страница заставки

6. **Особенности реализации:**

- Использует FreeRTOS для многозадачности
- Поддерживает различные темы оформления
- Имеет систему виджетов для модульности
- Поддерживает различные режимы отображения
- Имеет систему очередей для обновления
- Поддерживает различные дисплеи через DspCore



